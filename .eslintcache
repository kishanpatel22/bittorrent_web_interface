[{"/home/kishan/code/web_developement/back_end/Flask/bittorrent_web_interface/src/index.js":"1","/home/kishan/code/web_developement/back_end/Flask/bittorrent_web_interface/src/reportWebVitals.js":"2","/home/kishan/code/web_developement/back_end/Flask/bittorrent_web_interface/src/App.js":"3","/home/kishan/code/web_developement/back_end/Flask/bittorrent_web_interface/src/Components/BitTorrent/BitTorrent.js":"4","/home/kishan/code/web_developement/back_end/Flask/bittorrent_web_interface/src/Components/Info/About.js":"5","/home/kishan/code/web_developement/back_end/Flask/bittorrent_web_interface/src/Components/BitTorrent/TorrentFileUploadProgressBar.js":"6","/home/kishan/code/web_developement/back_end/Flask/bittorrent_web_interface/src/Components/BitTorrent/BitTorrentForm.js":"7","/home/kishan/code/web_developement/back_end/Flask/bittorrent_web_interface/src/Components/BitTorrent/DownloadButton.js":"8","/home/kishan/code/web_developement/back_end/Flask/bittorrent_web_interface/src/Components/NavBar/NavBar.js":"9","/home/kishan/code/web_developement/back_end/Flask/bittorrent_web_interface/src/Components/SwarmData/SwarmData.js":"10","/home/kishan/code/web_developement/back_end/Flask/bittorrent_web_interface/src/Components/ActivityData/ActivityData.js":"11","/home/kishan/code/web_developement/back_end/Flask/bittorrent_web_interface/src/Components/TorrentFileData/TorrentFileData.js":"12","/home/kishan/code/web_developement/back_end/Flask/bittorrent_web_interface/src/Components/TrackerData/TrackerData.js":"13"},{"size":500,"mtime":1608370045706,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1607709477828,"results":"16","hashOfConfig":"15"},{"size":1554,"mtime":1609225255411,"results":"17","hashOfConfig":"15"},{"size":831,"mtime":1608723276247,"results":"18","hashOfConfig":"15"},{"size":298,"mtime":1607709477828,"results":"19","hashOfConfig":"15"},{"size":922,"mtime":1608720633430,"results":"20","hashOfConfig":"15"},{"size":4536,"mtime":1608707331070,"results":"21","hashOfConfig":"15"},{"size":657,"mtime":1608720104966,"results":"22","hashOfConfig":"15"},{"size":2950,"mtime":1608722920096,"results":"23","hashOfConfig":"15"},{"size":3866,"mtime":1609190017442,"results":"24","hashOfConfig":"15"},{"size":747,"mtime":1608723996351,"results":"25","hashOfConfig":"15"},{"size":4794,"mtime":1609184587018,"results":"26","hashOfConfig":"15"},{"size":2457,"mtime":1609184585374,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"ve2d1c",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"30"},"/home/kishan/code/web_developement/back_end/Flask/bittorrent_web_interface/src/index.js",[],["61","62"],"/home/kishan/code/web_developement/back_end/Flask/bittorrent_web_interface/src/reportWebVitals.js",[],"/home/kishan/code/web_developement/back_end/Flask/bittorrent_web_interface/src/App.js",["63","64","65"],"/home/kishan/code/web_developement/back_end/Flask/bittorrent_web_interface/src/Components/BitTorrent/BitTorrent.js",["66","67"],"import React, {useState, useEffect} from 'react'\nimport About from '../Info/About'\nimport BitTorrentForm from './BitTorrentForm'\n\nfunction BitTorrent() {\n    const header_style = {\n        color:\"white\",\n        textAlign: \"center\",\n        fontSize: '50px'\n    };\n    /* This will be the route to the first page on website */\n    const [bittorrent, set_bittorrent] = useState([]);\n    useEffect(() => {\n        fetch('/bittorrent-api/').then(response => {\n            if(response.ok) {\n                return response.json()\n            }\n        }).then(data => console.log(data))\n    }, []);\n \n    return (\n        <div className=\"BitTorrent\">\n            <h1 style={header_style}> KP-BitTorrent Client Web Interface </h1>\n            <About />\n            <BitTorrentForm />\n        </div>\n    );\n}\n\nexport default BitTorrent;\n","/home/kishan/code/web_developement/back_end/Flask/bittorrent_web_interface/src/Components/Info/About.js",[],"/home/kishan/code/web_developement/back_end/Flask/bittorrent_web_interface/src/Components/BitTorrent/TorrentFileUploadProgressBar.js",[],["68","69"],"/home/kishan/code/web_developement/back_end/Flask/bittorrent_web_interface/src/Components/BitTorrent/BitTorrentForm.js",[],"/home/kishan/code/web_developement/back_end/Flask/bittorrent_web_interface/src/Components/BitTorrent/DownloadButton.js",[],"/home/kishan/code/web_developement/back_end/Flask/bittorrent_web_interface/src/Components/NavBar/NavBar.js",[],"/home/kishan/code/web_developement/back_end/Flask/bittorrent_web_interface/src/Components/SwarmData/SwarmData.js",["70","71"],"import React, {useState, useEffect} from 'react'\nimport NavBar from '../NavBar/NavBar.js'\nimport { Fade } from 'react-bootstrap'\n\nconst div_style = {\n    width : '240px', \n    height: '225px', \n    backgroundColor: '#C5EBF0', \n    marginLeft: '4%',\n    marginTop: '2%',\n    marginBottom: '2%',\n    border: '5px solid black',\n    display: 'inline-block',\n}\nconst peer_style = {\n    fontSize: '18px', \n    color: '#03515B',\n    fontWeight: 'bold'\n}\n\n\nclass SwarmData extends React.Component {\n    constructor(props) {\n        super(props);\n        let torrent_id = this.props.match.params.torrent_id\n        this.state = { torrent_id: torrent_id, data:{}, loading:true};\n        this.getSwarmData = this.getSwarmData.bind(this)\n    }\n\n    componentDidMount() {\n        this.getSwarmData();\n        setInterval(this.getSwarmData, 10000)\n    }\n    \n    getSwarmData() {\n        let tracker_url = '/bittorrent-api/torrent_file/'+String(this.state.torrent_id)+'/swarm_data';\n        fetch(tracker_url).then(response => {\n            if(response.ok) {\n                return response.json()\n            }\n        }).then((data) => {\n            this.setState({data: data})\n            console.log(data)\n            if(data.swarm_data.length !== 0) {\n                this.setState({loading: false})\n            }\n        })\n    }\n    \n    render() {\n        if(this.state.loading) {\n            return (\n                <div>\n                    <NavBar torrent_id={this.state.torrent_id} nav_bar_id={4}  />\n                    <p> Still data pending </p>\n                </div>\n            )\n        } else {\n            return(\n                <div>\n                    <NavBar torrent_id={this.state.torrent_id} nav_bar_id={4}  />\n                    {this.state.data.swarm_data.map((swarm_data, index) => (\n                        <Fade in={true}>\n                            <div style={div_style}>\n                                <div style={{textAlign:'left', paddingLeft: '2%'}}>\n                                    <p>\n                                        <span style={peer_style}> \n                                            Peer Index :\n                                        </span>\n                                        <span> {index + 1} </span>\n                                    </p> \n                                    <p> \n                                        <span style={peer_style}> \n                                            IP address :\n                                        </span>\n                                        <span> {swarm_data.peer_ip}  </span>\n                                    </p>\n                                    <p> \n                                        <span style={peer_style}> \n                                            PORT :\n                                        </span>\n                                        <span> {swarm_data.peer_port} </span>\n                                    </p>\n                                    <p> \n                                        <span style={peer_style}> \n                                            Pieces Downloaded :\n                                        </span>\n                                        <span> {swarm_data.num_downloaded_pieces} </span>\n                                    </p>\n                                     <p> \n                                        <span style={peer_style}> \n                                            Download Rate :\n                                        </span>\n                                        <span> {swarm_data.download_rate} KBps </span>\n                                    </p>\n                                </div>\n                            </div>\n                        </Fade>\n                    ))}\n                </div>\n            )\n        }\n    }\n}\n\nexport default SwarmData\n\n","/home/kishan/code/web_developement/back_end/Flask/bittorrent_web_interface/src/Components/ActivityData/ActivityData.js",["72","73","74","75"],"import React, {useState, useEffect} from 'react'\nimport NavBar from '../NavBar/NavBar.js'\n\nfunction ActivityData({match, location}) {\n    const { params: { torrent_id } } = match\n    const [torrent_file, set_torrent_file] = useState([])\n    let activity_data= null;\n\n    let torrent_file_url = '/bittorrent-api/torrent_file/' + String(torrent_id) + '/activity_data';\n    useEffect(() => {\n        fetch(torrent_file_url).then(response => {\n            if(response.ok) {\n                return response.json()\n            }\n        }).then((data) => {\n            console.log(data);\n        })\n    }, []);\n\n    return (\n        <div>\n            <NavBar torrent_id={torrent_id} nav_bar_id={5}/>\n        </div>\n    )\n};\n\nexport default ActivityData\n","/home/kishan/code/web_developement/back_end/Flask/bittorrent_web_interface/src/Components/TorrentFileData/TorrentFileData.js",["76","77"],"import React, {useState, useEffect} from 'react'\nimport NavBar from '../NavBar/NavBar'\nimport { Table } from 'react-bootstrap'\nimport { CircularProgressbar } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\n\nconst data_style = {\n    padding : '2%',\n    width:'65%',\n}\nconst download_style = {\n    width:'33%',\n    height:'400px',\n    marginTop: '2%',\n    backgroundColor: 'white',\n}\nconst div_style = {\n    padding: '1%',\n    height: '90%',\n    display:'flex',\n}\n\nclass TorrentFileData extends React.Component {\n    constructor(props) {\n        super(props);\n        let torrent_id = this.props.match.params.torrent_id\n        this.state = { torrent_id: torrent_id, data:{}, loading:true};\n        this.getTorrentFileData = this.getTorrentFileData.bind(this)\n    }\n\n    componentDidMount() {\n        this.getTorrentFileData();\n    }\n    \n    getTorrentFileData() {\n        let torrent_file_url = '/bittorrent-api/torrent_file/' + String(this.state.torrent_id);\n        fetch(torrent_file_url).then(response => {\n            if(response.ok) {\n                return response.json()\n            }\n        }).then((data) => {\n            this.setState({data: data});\n            this.setState({loading: false});\n            console.log(data)\n        })\n    }\n    \n    render() {\n        if(this.state.loading) {\n            return (\n                <div>\n                    <NavBar torrent_id={this.state.torrent_id} nav_bar_id={2}  />\n                    <p> Still data pending </p>\n                </div>\n            )\n        } else {\n            return(\n                <div>\n                    <NavBar torrent_id={this.state.torrent_id} nav_bar_id={2}  />\n                    <div style={div_style}> \n                        <div style={data_style}>\n                            <Table striped bordered hover variant=\"dark\">\n                                <thead>\n                                    <tr>\n                                        <th>Torrent File Data</th>\n                                        <th>Data Value</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    <tr>\n                                        <td>Trackers List</td>\n                                        <td>{this.state.data.torrent_file_data.tracker_list}</td>\n                                    </tr>\n                                    <tr>\n                                        <td>File Name</td>\n                                        <td>{this.state.data.torrent_file_data.file_name}</td>\n                                    </tr>\n                                    <tr>\n                                        <td>File Size</td>\n                                        <td>{this.state.data.torrent_file_data.file_size} MB</td>\n                                    </tr>\n                                    <tr>\n                                        <td>Piece Length</td>\n                                        <td>{this.state.data.torrent_file_data.piece_length} KB</td>\n                                    </tr>\n                                    <tr>\n                                        <td>Info Hash</td>\n                                        <td>{this.state.data.torrent_file_data.info_hash}</td>\n                                    </tr>\n                                    <tr>\n                                        <td>Number of Pieces</td>\n                                        <td>{this.state.data.torrent_file_data.num_pieces}</td>\n                                    </tr>\n                                    <tr>\n                                        <td>Client Peer ID</td>\n                                        <td>{this.state.data.torrent_file_data.client_peer_id}</td>\n                                    </tr>\n                                </tbody>\n                            </Table>\n                        </div>\n                        <div style={download_style}>\n                            <h2 style={{color:'blue',textAlign:'center'}}> \n                                {this.state.data.torrent_data.torrent_file_name} File Download Progress \n                            </h2>  \n                            <div style={{width:'70%', height:'70%', margin:'auto' }}>\n                                <CircularProgressbar \n                                    value={this.state.data.torrent_data.download_percentage} \n                                    text={`${this.state.data.torrent_data.download_percentage}%`} />;\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            )    \n        }\n    }\n}\n\nexport default TorrentFileData;\n","/home/kishan/code/web_developement/back_end/Flask/bittorrent_web_interface/src/Components/TrackerData/TrackerData.js",["78","79"],"import React, {useState, useEffect} from 'react'\nimport NavBar from '../NavBar/NavBar.js'\nimport { Table } from 'react-bootstrap'\n\nclass TrackerData extends React.Component {\n    constructor(props) {\n        super(props);\n        let torrent_id = this.props.match.params.torrent_id\n        this.state = { torrent_id: torrent_id, data:{}, loading:true};\n        this.getTrackerData = this.getTrackerData.bind(this)\n    }\n\n    componentDidMount() {\n        this.getTrackerData();\n    }\n    \n    getTrackerData() {\n        let tracker_url = '/bittorrent-api/torrent_file/'+String(this.state.torrent_id)+'/tracker_data';\n        fetch(tracker_url).then(response => {\n            if(response.ok) {\n                return response.json()\n            }\n        }).then((data) => {\n            this.setState({data: data});\n            if(data.tracker_data.length !== 0) {\n                this.setState({loading: false})\n            }\n        })\n    }\n    \n    render() {\n        if(this.state.loading) {\n            return (\n                <div>\n                    <NavBar torrent_id={this.state.torrent_id} nav_bar_id={3}  />\n                    <p> Still data pending </p>\n                </div>\n            )\n        } else {\n            return(\n                <div>\n                    <NavBar torrent_id={this.state.torrent_id} nav_bar_id={3}  />\n                    <div style={{padding: '1%', width: '80%', margin: 'auto'}}> \n                        <div>\n                            <Table striped bordered hover variant=\"dark\">\n                                <thead>\n                                    <tr>\n                                        <th>Tracker URL</th>\n                                        <th>Connection Status</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                {this.state.data.tracker_data.map((tracker_data, index) => (\n                                    <tr>\n                                        <td>{tracker_data.tracker_url}</td>\n                                        <td>{tracker_data.connection_status}</td>\n                                    </tr>\n                                ))}\n                                </tbody>\n                            </Table>\n                        </div>\n                    </div>\n                </div>\n            )\n        }\n    }\n}\n\nexport default TrackerData;\n\n\n\n",{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":1,"column":16,"nodeType":"86","messageId":"87","endLine":1,"endColumn":24},{"ruleId":"84","severity":1,"message":"88","line":1,"column":26,"nodeType":"86","messageId":"87","endLine":1,"endColumn":35},{"ruleId":"84","severity":1,"message":"89","line":7,"column":34,"nodeType":"86","messageId":"87","endLine":7,"endColumn":40},{"ruleId":"84","severity":1,"message":"90","line":12,"column":12,"nodeType":"86","messageId":"87","endLine":12,"endColumn":22},{"ruleId":"84","severity":1,"message":"91","line":12,"column":24,"nodeType":"86","messageId":"87","endLine":12,"endColumn":38},{"ruleId":"80","replacedBy":"92"},{"ruleId":"82","replacedBy":"93"},{"ruleId":"84","severity":1,"message":"85","line":1,"column":16,"nodeType":"86","messageId":"87","endLine":1,"endColumn":24},{"ruleId":"84","severity":1,"message":"88","line":1,"column":26,"nodeType":"86","messageId":"87","endLine":1,"endColumn":35},{"ruleId":"84","severity":1,"message":"94","line":6,"column":12,"nodeType":"86","messageId":"87","endLine":6,"endColumn":24},{"ruleId":"84","severity":1,"message":"95","line":6,"column":26,"nodeType":"86","messageId":"87","endLine":6,"endColumn":42},{"ruleId":"84","severity":1,"message":"96","line":7,"column":9,"nodeType":"86","messageId":"87","endLine":7,"endColumn":22},{"ruleId":"97","severity":1,"message":"98","line":18,"column":8,"nodeType":"99","endLine":18,"endColumn":10,"suggestions":"100"},{"ruleId":"84","severity":1,"message":"85","line":1,"column":16,"nodeType":"86","messageId":"87","endLine":1,"endColumn":24},{"ruleId":"84","severity":1,"message":"88","line":1,"column":26,"nodeType":"86","messageId":"87","endLine":1,"endColumn":35},{"ruleId":"84","severity":1,"message":"85","line":1,"column":16,"nodeType":"86","messageId":"87","endLine":1,"endColumn":24},{"ruleId":"84","severity":1,"message":"88","line":1,"column":26,"nodeType":"86","messageId":"87","endLine":1,"endColumn":35},"no-native-reassign",["101"],"no-negated-in-lhs",["102"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Switch' is defined but never used.","'bittorrent' is assigned a value but never used.","'set_bittorrent' is assigned a value but never used.",["101"],["102"],"'torrent_file' is assigned a value but never used.","'set_torrent_file' is assigned a value but never used.","'activity_data' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'torrent_file_url'. Either include it or remove the dependency array.","ArrayExpression",["103"],"no-global-assign","no-unsafe-negation",{"desc":"104","fix":"105"},"Update the dependencies array to be: [torrent_file_url]",{"range":"106","text":"107"},[600,602],"[torrent_file_url]"]